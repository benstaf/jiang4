---
import type { Content as Props } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';

const researchAreas = [
  {
    icon: 'tabler:cpu',
    title: 'Reinforcement Learning',
    description: 'Developing advanced RL algorithms that adapt to market conditions and optimize trading strategies in real-time.'
  },
  {
    icon: 'tabler:network',
    title: 'Large Language Models',
    description: 'Leveraging LLMs for market sentiment analysis, news processing, and natural language understanding of market dynamics.'
  },
  {
    icon: 'tabler:trending-up',
    title: 'Decentralized Finance',
    description: 'Cutting-edge expertise in decentralized finance protocols, yield farming strategies, and cross-chain arbitrage opportunities.'
  },
  {
    icon: 'tabler:book-open',
    title: 'Market Making',
    description: 'Deep analysis of order book dynamics, liquidity patterns, and market making strategies across multiple venues.'
  }
];

const {
  title = 'Our Approach',
  subtitle = 'Our research lab continuously explores the frontiers of quantitative trading, combining academic rigor with practical market applications.',
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = researchAreas,
  columns = 2,
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,
  showVision = true,
  visionTitle = 'Vision',
  visionContent = 'At Jiang Street, we operate as a research lab with trading bots attached to it. Our team of quantitative researchers, data scientists, and engineers work together to push the boundaries of what\'s possible in algorithmic trading. We believe that the future of quantitative trading lies in the convergence of Artificial Intelligence and Blockchain technologies, especially reinforcement learning, large language models, and decentralized finance.',

  id,
  isDark = false,
  classes = {},
  bg = 'bg-gradient-to-br from-blue-50 to-indigo-50',
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : 'py-20'} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'text-center mb-16',
      title: 'text-4xl font-bold text-gray-900 mb-4',
      subtitle: 'text-xl text-gray-600 max-w-3xl mx-auto',
    }}
  />
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class={`${image ? `md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16` : ''}`}>
      <div class={image ? "md:basis-1/2 self-center" : "w-full"}>
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `grid grid-cols-1 md:grid-cols-${columns} gap-8`,
            panel: 'bg-white p-8 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-200',
            title: 'text-xl font-semibold text-gray-900',
            description: 'text-gray-600 leading-relaxed',
            icon: 'flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg mr-4 text-blue-600',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            titleContainer: 'flex items-center mb-6',
          }}
        />

        {showVision && (
          <div class="text-center mt-12">
            <div class="bg-white p-8 rounded-xl shadow-lg max-w-4xl mx-auto">
              <h3 class="text-2xl font-bold text-gray-900 mb-4">
                {visionTitle}
              </h3>
              <p class="text-lg text-gray-700 leading-relaxed">
                {visionContent}
              </p>
            </div>
          </div>
        )}
      </div>
      {image && (
        <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
          <div class="relative m-auto max-w-4xl">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                width={500}
                height={500}
                widths={[400, 768]}
                sizes="(max-width: 768px) 100vw, 432px"
                layout="responsive"
                {...image}
              />
            )}
          </div>
        </div>
      )}
    </div>
  </div>
</WidgetWrapper>
