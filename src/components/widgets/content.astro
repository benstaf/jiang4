---
import type { Content as Props } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';

const features = [
  {
    icon: 'tabler:brain',
    title: 'Machine Learning',
    description: 'Advanced reinforcement learning algorithms combined with large language models to identify market patterns and opportunities.'
  },
  {
    icon: 'tabler:code',
    title: 'Technology',
    description: 'Cutting-edge infrastructure and proprietary trading systems built for speed, reliability, and scalability.'
  },
  {
    icon: 'tabler:chart-bar',
    title: 'Quantitative Research',
    description: 'Data-driven research methodologies that combine traditional finance with decentralized finance innovations.'
  },
  {
    icon: 'tabler:bolt',
    title: 'High-Frequency Trading',
    description: 'Ultra-low latency trading systems that execute thousands of trades per second across multiple markets.'
  },
  {
    icon: 'tabler:shield',
    title: 'Risk Management',
    description: 'Sophisticated risk controls and monitoring systems to protect capital and ensure consistent performance.'
  },
  {
    icon: 'tabler:world',
    title: 'Global Markets',
    description: 'Trading across traditional and decentralized markets worldwide, 24/7, with deep liquidity provision.'
  }
];

const {
  title = 'Our Approach',
  subtitle = 'We combine rigorous research, advanced technology, and deep market expertise to create sustainable trading strategies in both traditional and decentralized markets.',
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = features,
  columns = 3,
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : 'py-20'} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'text-center mb-16',
      title: 'text-4xl font-bold text-gray-900 mb-4',
      subtitle: 'text-xl text-gray-600 max-w-3xl mx-auto',
    }}
  />
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class={`${image ? `md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16` : ''}`}>
      <div class={image ? "md:basis-1/2 self-center" : "w-full"}>
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-${columns} gap-8`,
            panel: 'p-8 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors duration-200 group',
            title: 'text-xl font-semibold text-gray-900 mb-4',
            description: 'text-gray-600 leading-relaxed',
            icon: 'flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg mb-6 group-hover:bg-blue-200 transition-colors text-blue-600',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      {image && (
        <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
          <div class="relative m-auto max-w-4xl">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                width={500}
                height={500}
                widths={[400, 768]}
                sizes="(max-width: 768px) 100vw, 432px"
                layout="responsive"
                {...image}
              />
            )}
          </div>
        </div>
      )}
    </div>
  </div>
</WidgetWrapper>
